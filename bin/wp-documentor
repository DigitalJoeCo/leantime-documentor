#!/usr/bin/env php
<?php

namespace Pronamic\WordPress\Documentor;

require_once __DIR__ . '/../vendor/autoload.php';

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

$application = new Application( 'Pronamic WordPress Documentor', '1.0.0' );

$application->register( 'parse' )
	->addArgument( 'source', InputArgument::REQUIRED, 'Directory to scan for hooks extraction.' )
	->addOption( 'format', null, InputOption::VALUE_REQUIRED, 'Render output in a particular format.', 'default' )
	->addOption( 'template', null, InputOption::VALUE_REQUIRED, 'Render output in a template format.', null )
	->addOption( 'type', null, InputOption::VALUE_REQUIRED, 'Hook type.', null )
	->setCode( function( InputInterface $input, OutputInterface $output ) {
		$io = new SymfonyStyle( $input, $output );

		$source = $input->getArgument( 'source' );

		$documentor = new Documentor( $source );

		$documentor->type = $input->getOption( 'type' );

		$documentor->parse();

		$printer = null;

		$format = $input->getOption( 'format' ); 

		switch ( $format ) {
			case 'default':
				$printer = new DefaultPrinter( $documentor, $output );

				break;
			case 'hookster':
				$printer = new HooksterPrinter( $documentor, $output, $documentor->type );

				break;
			case 'markdown':
				$printer = new TemplatePrinter( $documentor, $output, __DIR__ . '/../templates/markdown.php' );

				break;
			case 'phpdocumentor-rst':
				$printer = new TemplatePrinter( $documentor, $output, __DIR__ . '/../templates/phpdocumentor-rst.php' );

				break;
		}

		$template = $input->getOption( 'template' );

		if ( null !== $template && \is_readable( $template ) ) {
			$printer = new TemplatePrinter( $documentor, $output, $template );
		}

		if ( null === $printer ) {
			$io->warning( 'No printer defined.' );
		}

		$printer->render();
	} );

$application->run();
